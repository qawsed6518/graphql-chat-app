{"ast":null,"code":"var _jsxFileName = \"C:\\\\code3\\\\web\\\\src\\\\components\\\\Messages.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport Message from \"./Message\";\nimport { gql, useQuery, useSubscription } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Messages({\n  channelName\n}) {\n  _s();\n\n  // const { result } = useQuery(MESSAGES, {\n  //     variables: { channelName },\n  // });\n  const {\n    data,\n    loading\n  } = useSubscription(NEW_MESSAGE, {\n    variables: {\n      channelName\n    }\n  });\n  console.log(data); // return result.loading ? (\n  //     <Container></Container>\n  // ) : (\n  //     <Container>\n  //         {/* {result.data.messages.map((message) => (\n  //             <Message\n  //                 timestamp={message.date}\n  //                 message={message.text}\n  //                 user={message.user}\n  //             />\n  //         ))} */}\n  //         {loading\n  //             ? null\n  //             : data.newMessage.map((message) => (\n  //                   <Message\n  //                       timestamp={message.date}\n  //                       message={message.text}\n  //                       user={message.user}\n  //                   />\n  //               ))}\n  //     </Container>\n  // );\n\n  return loading ? /*#__PURE__*/_jsxDEV(Container, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(Container, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Messages, \"5O7La878DaIBsYAwtfyK/5VU9zs=\", false, function () {\n  return [useSubscription];\n});\n\n_c = Messages;\nexport default Messages;\nconst NEW_MESSAGE = gql`\n    subscription new_Message($channelName: String!) {\n        newMessage(channelName: $channelName) {\n            user\n            text\n            date\n        }\n    }\n`;\nconst MESSAGES = gql`\n    query Messages($channelName: String!) {\n        messages(channelName: $channelName) {\n            user\n            text\n            date\n        }\n    }\n`;\nconst Container = styled.div`\n    flex: 1;\n    overflow: auto;\n\n    ::-webkit-scrollbar {\n        width: 10px;\n    }\n    ::-webkit-scrollbar-thumb {\n        background-color: #2f3542;\n    }\n    ::-webkit-scrollbar-track {\n        background-color: grey;\n    }\n`;\n_c2 = Container;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Messages\");\n$RefreshReg$(_c2, \"Container\");","map":{"version":3,"sources":["C:/code3/web/src/components/Messages.js"],"names":["React","styled","Message","gql","useQuery","useSubscription","Messages","channelName","data","loading","NEW_MESSAGE","variables","console","log","MESSAGES","Container","div"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,GAAT,EAAcC,QAAd,EAAwBC,eAAxB,QAA+C,gBAA/C;;;AAEA,SAASC,QAAT,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAAmC;AAAA;;AAC/B;AACA;AACA;AAEA,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBJ,eAAe,CAACK,WAAD,EAAc;AACnDC,IAAAA,SAAS,EAAE;AAAEJ,MAAAA;AAAF;AADwC,GAAd,CAAzC;AAIAK,EAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ,EAT+B,CAU/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAOC,OAAO,gBACV,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,UADU,gBAGV,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,UAHJ;AAaH;;GA9CQH,Q;UAKqBD,e;;;KALrBC,Q;AA+CT,eAAeA,QAAf;AAEA,MAAMI,WAAW,GAAGP,GAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;AAUA,MAAMW,QAAQ,GAAGX,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;AAUA,MAAMY,SAAS,GAAGd,MAAM,CAACe,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAbA;MAAMD,S","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Message from \"./Message\";\r\nimport { gql, useQuery, useSubscription } from \"@apollo/client\";\r\n\r\nfunction Messages({ channelName }) {\r\n    // const { result } = useQuery(MESSAGES, {\r\n    //     variables: { channelName },\r\n    // });\r\n\r\n    const { data, loading } = useSubscription(NEW_MESSAGE, {\r\n        variables: { channelName },\r\n    });\r\n\r\n    console.log(data);\r\n    // return result.loading ? (\r\n    //     <Container></Container>\r\n    // ) : (\r\n    //     <Container>\r\n    //         {/* {result.data.messages.map((message) => (\r\n    //             <Message\r\n    //                 timestamp={message.date}\r\n    //                 message={message.text}\r\n    //                 user={message.user}\r\n    //             />\r\n    //         ))} */}\r\n    //         {loading\r\n    //             ? null\r\n    //             : data.newMessage.map((message) => (\r\n    //                   <Message\r\n    //                       timestamp={message.date}\r\n    //                       message={message.text}\r\n    //                       user={message.user}\r\n    //                   />\r\n    //               ))}\r\n    //     </Container>\r\n    // );\r\n\r\n    return loading ? (\r\n        <Container></Container>\r\n    ) : (\r\n        <Container>\r\n            {/* {data.newMessage.map((message) => (\r\n                <Message\r\n                    timestamp={message.date}\r\n                    message={message.text}\r\n                    user={message.user}\r\n                />\r\n            ))} */}\r\n        </Container>\r\n    );\r\n}\r\nexport default Messages;\r\n\r\nconst NEW_MESSAGE = gql`\r\n    subscription new_Message($channelName: String!) {\r\n        newMessage(channelName: $channelName) {\r\n            user\r\n            text\r\n            date\r\n        }\r\n    }\r\n`;\r\n\r\nconst MESSAGES = gql`\r\n    query Messages($channelName: String!) {\r\n        messages(channelName: $channelName) {\r\n            user\r\n            text\r\n            date\r\n        }\r\n    }\r\n`;\r\n\r\nconst Container = styled.div`\r\n    flex: 1;\r\n    overflow: auto;\r\n\r\n    ::-webkit-scrollbar {\r\n        width: 10px;\r\n    }\r\n    ::-webkit-scrollbar-thumb {\r\n        background-color: #2f3542;\r\n    }\r\n    ::-webkit-scrollbar-track {\r\n        background-color: grey;\r\n    }\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}