{"ast":null,"code":"var _jsxFileName = \"C:\\\\code3\\\\web\\\\src\\\\components\\\\Messages.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport Message from \"./Message\";\nimport { gql, useQuery, useSubscription } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Messages({\n  channelName\n}) {\n  _s();\n\n  const {\n    result\n  } = useQuery(MESSAGES, {\n    variables: {\n      channelName\n    }\n  });\n  const {\n    data: {\n      newMessage\n    },\n    loading\n  } = useSubscription(NEW_MESSAGE, {\n    variables: {\n      channelName\n    }\n  });\n  return result.loading ? /*#__PURE__*/_jsxDEV(Container, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(Container, {\n    children: [result.data.messages.map(message => /*#__PURE__*/_jsxDEV(Message, {\n      timestamp: message.date,\n      message: message.text,\n      user: message.user\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 17\n    }, this)), !loading && newMessage.map(message => /*#__PURE__*/_jsxDEV(Message, {\n      timestamp: message.date,\n      message: message.text,\n      user: message.user\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 21\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Messages, \"LxitmHj2AMKKrauuDS7GvroQixA=\", false, function () {\n  return [useQuery, useSubscription];\n});\n\n_c = Messages;\nexport default Messages;\nconst NEW_MESSAGE = gql`\n    subscription new_Message($channelName: String!) {\n        newMessage(channelName: $channelName) {\n            user\n            text\n            date\n        }\n    }\n`;\nconst MESSAGES = gql`\n    query Messages($channelName: String!) {\n        messages(channelName: $channelName) {\n            user\n            text\n            date\n        }\n    }\n`;\nconst Container = styled.div`\n    flex: 1;\n    overflow: auto;\n\n    ::-webkit-scrollbar {\n        width: 10px;\n    }\n    ::-webkit-scrollbar-thumb {\n        background-color: #2f3542;\n    }\n    ::-webkit-scrollbar-track {\n        background-color: grey;\n    }\n`;\n_c2 = Container;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Messages\");\n$RefreshReg$(_c2, \"Container\");","map":{"version":3,"sources":["C:/code3/web/src/components/Messages.js"],"names":["React","styled","Message","gql","useQuery","useSubscription","Messages","channelName","result","MESSAGES","variables","data","newMessage","loading","NEW_MESSAGE","messages","map","message","date","text","user","Container","div"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,GAAT,EAAcC,QAAd,EAAwBC,eAAxB,QAA+C,gBAA/C;;;AAEA,SAASC,QAAT,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAAmC;AAAA;;AAC/B,QAAM;AAAEC,IAAAA;AAAF,MAAaJ,QAAQ,CAACK,QAAD,EAAW;AAClCC,IAAAA,SAAS,EAAE;AAAEH,MAAAA;AAAF;AADuB,GAAX,CAA3B;AAIA,QAAM;AACFI,IAAAA,IAAI,EAAE;AAAEC,MAAAA;AAAF,KADJ;AAEFC,IAAAA;AAFE,MAGFR,eAAe,CAACS,WAAD,EAAc;AAAEJ,IAAAA,SAAS,EAAE;AAAEH,MAAAA;AAAF;AAAb,GAAd,CAHnB;AAKA,SAAOC,MAAM,CAACK,OAAP,gBACH,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,UADG,gBAGH,QAAC,SAAD;AAAA,eACKL,MAAM,CAACG,IAAP,CAAYI,QAAZ,CAAqBC,GAArB,CAA0BC,OAAD,iBACtB,QAAC,OAAD;AACI,MAAA,SAAS,EAAEA,OAAO,CAACC,IADvB;AAEI,MAAA,OAAO,EAAED,OAAO,CAACE,IAFrB;AAGI,MAAA,IAAI,EAAEF,OAAO,CAACG;AAHlB;AAAA;AAAA;AAAA;AAAA,YADH,CADL,EAQK,CAACP,OAAD,IACGD,UAAU,CAACI,GAAX,CAAgBC,OAAD,iBACX,QAAC,OAAD;AACI,MAAA,SAAS,EAAEA,OAAO,CAACC,IADvB;AAEI,MAAA,OAAO,EAAED,OAAO,CAACE,IAFrB;AAGI,MAAA,IAAI,EAAEF,OAAO,CAACG;AAHlB;AAAA;AAAA;AAAA;AAAA,YADJ,CATR;AAAA;AAAA;AAAA;AAAA;AAAA,UAHJ;AAqBH;;GA/BQd,Q;UACcF,Q,EAOfC,e;;;KARCC,Q;AAgCT,eAAeA,QAAf;AAEA,MAAMQ,WAAW,GAAGX,GAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;AAUA,MAAMM,QAAQ,GAAGN,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;AAUA,MAAMkB,SAAS,GAAGpB,MAAM,CAACqB,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAbA;MAAMD,S","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Message from \"./Message\";\r\nimport { gql, useQuery, useSubscription } from \"@apollo/client\";\r\n\r\nfunction Messages({ channelName }) {\r\n    const { result } = useQuery(MESSAGES, {\r\n        variables: { channelName },\r\n    });\r\n\r\n    const {\r\n        data: { newMessage },\r\n        loading,\r\n    } = useSubscription(NEW_MESSAGE, { variables: { channelName } });\r\n\r\n    return result.loading ? (\r\n        <Container></Container>\r\n    ) : (\r\n        <Container>\r\n            {result.data.messages.map((message) => (\r\n                <Message\r\n                    timestamp={message.date}\r\n                    message={message.text}\r\n                    user={message.user}\r\n                />\r\n            ))}\r\n            {!loading &&\r\n                newMessage.map((message) => (\r\n                    <Message\r\n                        timestamp={message.date}\r\n                        message={message.text}\r\n                        user={message.user}\r\n                    />\r\n                ))}\r\n        </Container>\r\n    );\r\n}\r\nexport default Messages;\r\n\r\nconst NEW_MESSAGE = gql`\r\n    subscription new_Message($channelName: String!) {\r\n        newMessage(channelName: $channelName) {\r\n            user\r\n            text\r\n            date\r\n        }\r\n    }\r\n`;\r\n\r\nconst MESSAGES = gql`\r\n    query Messages($channelName: String!) {\r\n        messages(channelName: $channelName) {\r\n            user\r\n            text\r\n            date\r\n        }\r\n    }\r\n`;\r\n\r\nconst Container = styled.div`\r\n    flex: 1;\r\n    overflow: auto;\r\n\r\n    ::-webkit-scrollbar {\r\n        width: 10px;\r\n    }\r\n    ::-webkit-scrollbar-thumb {\r\n        background-color: #2f3542;\r\n    }\r\n    ::-webkit-scrollbar-track {\r\n        background-color: grey;\r\n    }\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}