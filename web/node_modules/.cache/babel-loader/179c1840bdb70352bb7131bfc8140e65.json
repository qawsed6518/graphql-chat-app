{"ast":null,"code":"import _taggedTemplateLiteral from\"C:/code3/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";import _objectSpread from\"C:/code3/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _regeneratorRuntime from\"C:/code3/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/code3/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:/code3/web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";var _templateObject,_templateObject2,_templateObject3,_templateObject4;import React from\"react\";import styled from\"styled-components\";import{useForm}from\"react-hook-form\";import{gql,useMutation}from\"@apollo/client\";import Messages from\"./Messages\";import ChatHeader from\"./ChatHeader\";import Drop from\"./Drop\";// import { CardGiftcard } from \"@styled-icons/material/CardGiftcard\";\n// import { Gif } from \"@styled-icons/fluentui-system-regular/Gif\";\n// import { EmojiSmile } from \"@styled-icons/bootstrap/EmojiSmile\";\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Chat(_ref){var channelName=_ref.channelName;var _useForm=useForm(),register=_useForm.register,handleSubmit=_useForm.handleSubmit;var _useMutation=useMutation(CREATE_MESSAGE),_useMutation2=_slicedToArray(_useMutation,1),messageMutation=_useMutation2[0];var onSubmit=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(data,e){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:e.target.reset();_context.next=3;return messageMutation({variables:{channelName:channelName,text:data.text}});case 3:case\"end\":return _context.stop();}}},_callee);}));return function onSubmit(_x,_x2){return _ref2.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(Container,{children:[/*#__PURE__*/_jsx(ChatHeader,{channelName:channelName}),channelName?/*#__PURE__*/_jsx(Messages,{channelName:channelName}):/*#__PURE__*/_jsx(Dummy,{}),/*#__PURE__*/_jsxs(MessagesInput,{children:[/*#__PURE__*/_jsx(Drop,{disabled:!channelName,channelName:channelName}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit(onSubmit),children:[/*#__PURE__*/_jsx(\"input\",_objectSpread({// value={input}\ndisabled:!channelName},register(\"text\"))),/*#__PURE__*/_jsx(\"button\",{disabled:!channelName,type:\"submit\"// onClick={sendMessage}\n,children:\"Send\"})]})]})]});}export default Chat;var CREATE_MESSAGE=gql(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n    mutation createMessage($channelName: String!, $text: String!) {\\n        createMessage(input: { channelName: $channelName, text: $text })\\n    }\\n\"])));var Container=styled.div(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n    display: flex;\\n    flex-direction: column;\\n    flex: 0.8;\\n    background-color: #363a3f;\\n    height: 100vh;\\n\"])));var Dummy=styled.div(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n    flex: 1;\\n    overflow: auto;\\n\\n    ::-webkit-scrollbar {\\n        width: 10px;\\n    }\\n    ::-webkit-scrollbar-thumb {\\n        background-color: #2f3542;\\n    }\\n    ::-webkit-scrollbar-track {\\n        background-color: grey;\\n    }\\n\"])));// const ChatIcons = styled.div``;\nvar MessagesInput=styled.div(_templateObject4||(_templateObject4=_taggedTemplateLiteral([\"\\n    color: lightgray;\\n    display: flex;\\n    align-items: center;\\n    justify-content: space-between;\\n    padding: 15px;\\n    border-radius: 5px;\\n    margin: 20px;\\n    border-top: 1px solid gray;\\n    background-color: #474b53;\\n\\n    form {\\n        flex: 1;\\n    }\\n\\n    form > input {\\n        padding: 15px;\\n        background: transparent;\\n        border: none;\\n        outline-width: 0;\\n        color: white;\\n        font-size: large;\\n        width: 100%;\\n    }\\n\\n    form > button {\\n        display: none;\\n    }\\n\"])));// const Card = styled(CardGiftcard)`\n//     padding: 5px;\n// `;\n// const GifIcon = styled(Gif)`\n//     padding: 5px;\n// `;\n// const Emoji = styled(EmojiSmile)`\n//     padding: 5px;\n// `;","map":{"version":3,"sources":["C:/code3/web/src/components/Chat.js"],"names":["React","styled","useForm","gql","useMutation","Messages","ChatHeader","Drop","Chat","channelName","register","handleSubmit","CREATE_MESSAGE","messageMutation","onSubmit","data","e","target","reset","variables","text","Container","div","Dummy","MessagesInput"],"mappings":"kuBAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,MAAP,KAAmB,mBAAnB,CACA,OAASC,OAAT,KAAwB,iBAAxB,CACA,OAASC,GAAT,CAAcC,WAAd,KAAiC,gBAAjC,CACA,MAAOC,CAAAA,QAAP,KAAqB,YAArB,CACA,MAAOC,CAAAA,UAAP,KAAuB,cAAvB,CACA,MAAOC,CAAAA,IAAP,KAAiB,QAAjB,CAEA;AACA;AACA;wFAEA,QAASC,CAAAA,IAAT,MAA+B,IAAfC,CAAAA,WAAe,MAAfA,WAAe,CAC3B,aAAmCP,OAAO,EAA1C,CAAQQ,QAAR,UAAQA,QAAR,CAAkBC,YAAlB,UAAkBA,YAAlB,CACA,iBAA0BP,WAAW,CAACQ,cAAD,CAArC,8CAAOC,eAAP,kBAEA,GAAMC,CAAAA,QAAQ,2FAAG,iBAAOC,IAAP,CAAaC,CAAb,kHACbA,CAAC,CAACC,MAAF,CAASC,KAAT,GADa,sBAEPL,CAAAA,eAAe,CAAC,CAClBM,SAAS,CAAE,CACPV,WAAW,CAAEA,WADN,CAEPW,IAAI,CAAEL,IAAI,CAACK,IAFJ,CADO,CAAD,CAFR,uDAAH,kBAARN,CAAAA,QAAQ,iDAAd,CAUA,mBACI,MAAC,SAAD,yBACI,KAAC,UAAD,EAAY,WAAW,CAAEL,WAAzB,EADJ,CAEKA,WAAW,cAAG,KAAC,QAAD,EAAU,WAAW,CAAEA,WAAvB,EAAH,cAA4C,KAAC,KAAD,IAF5D,cAGI,MAAC,aAAD,yBACI,KAAC,IAAD,EAAM,QAAQ,CAAE,CAACA,WAAjB,CAA8B,WAAW,CAAEA,WAA3C,EADJ,cAEI,cAAM,QAAQ,CAAEE,YAAY,CAACG,QAAD,CAA5B,wBACI,4BACI;AACA,QAAQ,CAAE,CAACL,WAFf,EAGQC,QAAQ,CAAC,MAAD,CAHhB,EADJ,cAQI,eACI,QAAQ,CAAE,CAACD,WADf,CAEI,IAAI,CAAC,QACL;AAHJ,kBARJ,GAFJ,GAHJ,GADJ,CA+BH,CAED,cAAeD,CAAAA,IAAf,CAEA,GAAMI,CAAAA,cAAc,CAAGT,GAAH,yNAApB,CAKA,GAAMkB,CAAAA,SAAS,CAAGpB,MAAM,CAACqB,GAAV,0LAAf,CAQA,GAAMC,CAAAA,KAAK,CAAGtB,MAAM,CAACqB,GAAV,uTAAX,CAeA;AAEA,GAAME,CAAAA,aAAa,CAAGvB,MAAM,CAACqB,GAAV,8lBAAnB,CA8BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { gql, useMutation } from \"@apollo/client\";\r\nimport Messages from \"./Messages\";\r\nimport ChatHeader from \"./ChatHeader\";\r\nimport Drop from \"./Drop\";\r\n\r\n// import { CardGiftcard } from \"@styled-icons/material/CardGiftcard\";\r\n// import { Gif } from \"@styled-icons/fluentui-system-regular/Gif\";\r\n// import { EmojiSmile } from \"@styled-icons/bootstrap/EmojiSmile\";\r\n\r\nfunction Chat({ channelName }) {\r\n    const { register, handleSubmit } = useForm();\r\n    const [messageMutation] = useMutation(CREATE_MESSAGE);\r\n\r\n    const onSubmit = async (data, e) => {\r\n        e.target.reset();\r\n        await messageMutation({\r\n            variables: {\r\n                channelName: channelName,\r\n                text: data.text,\r\n            },\r\n        });\r\n    };\r\n\r\n    return (\r\n        <Container>\r\n            <ChatHeader channelName={channelName} />\r\n            {channelName ? <Messages channelName={channelName} /> : <Dummy />}\r\n            <MessagesInput>\r\n                <Drop disabled={!channelName} channelName={channelName} />\r\n                <form onSubmit={handleSubmit(onSubmit)}>\r\n                    <input\r\n                        // value={input}\r\n                        disabled={!channelName}\r\n                        {...register(\"text\")}\r\n                        // onChange={(e) => setInput(e.target.value)}\r\n                        // placeholder={`Message #${channelName}`}\r\n                    />\r\n                    <button\r\n                        disabled={!channelName}\r\n                        type=\"submit\"\r\n                        // onClick={sendMessage}\r\n                    >\r\n                        Send\r\n                    </button>\r\n                </form>\r\n\r\n                {/* <ChatIcons>\r\n                    <Card size=\"40\" />\r\n                    <GifIcon size=\"40\" />\r\n                    <Emoji size=\"40\" />\r\n                </ChatIcons> */}\r\n            </MessagesInput>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default Chat;\r\n\r\nconst CREATE_MESSAGE = gql`\r\n    mutation createMessage($channelName: String!, $text: String!) {\r\n        createMessage(input: { channelName: $channelName, text: $text })\r\n    }\r\n`;\r\nconst Container = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    flex: 0.8;\r\n    background-color: #363a3f;\r\n    height: 100vh;\r\n`;\r\n\r\nconst Dummy = styled.div`\r\n    flex: 1;\r\n    overflow: auto;\r\n\r\n    ::-webkit-scrollbar {\r\n        width: 10px;\r\n    }\r\n    ::-webkit-scrollbar-thumb {\r\n        background-color: #2f3542;\r\n    }\r\n    ::-webkit-scrollbar-track {\r\n        background-color: grey;\r\n    }\r\n`;\r\n\r\n// const ChatIcons = styled.div``;\r\n\r\nconst MessagesInput = styled.div`\r\n    color: lightgray;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    padding: 15px;\r\n    border-radius: 5px;\r\n    margin: 20px;\r\n    border-top: 1px solid gray;\r\n    background-color: #474b53;\r\n\r\n    form {\r\n        flex: 1;\r\n    }\r\n\r\n    form > input {\r\n        padding: 15px;\r\n        background: transparent;\r\n        border: none;\r\n        outline-width: 0;\r\n        color: white;\r\n        font-size: large;\r\n        width: 100%;\r\n    }\r\n\r\n    form > button {\r\n        display: none;\r\n    }\r\n`;\r\n\r\n// const Card = styled(CardGiftcard)`\r\n//     padding: 5px;\r\n// `;\r\n// const GifIcon = styled(Gif)`\r\n//     padding: 5px;\r\n// `;\r\n// const Emoji = styled(EmojiSmile)`\r\n//     padding: 5px;\r\n// `;\r\n"]},"metadata":{},"sourceType":"module"}