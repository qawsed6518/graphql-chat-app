{"ast":null,"code":"var _jsxFileName = \"C:\\\\code3\\\\web\\\\src\\\\index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\nimport { split, HttpLink } from \"@apollo/client\";\nimport \"./index.css\";\nimport { WebSocketLink } from \"@apollo/client/link/ws\";\nimport { getMainDefinition } from \"@apollo/client/utilities\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst httpLink = new HttpLink({\n  uri: \"http://localhost:4000/graphql\"\n});\nconst wsLink = new WebSocketLink({\n  uri: \"ws://localhost:4000/subscriptions\",\n  options: {\n    reconnect: true\n  }\n});\nconst splitLink = split(({\n  query\n}) => {\n  const definition = getMainDefinition(query);\n  return definition.kind === \"OperationDefinition\" && definition.operation === \"subscription\";\n}, wsLink, httpLink);\nconst client = new ApolloClient({\n  // uri: \"http://localhost:4000/graphql\",\n  link: splitLink,\n  cache: new InMemoryCache(),\n  credentials: \"include\"\n});\nReactDOM.render( /*#__PURE__*/_jsxDEV(ApolloProvider, {\n  client: client,\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 41,\n  columnNumber: 5\n}, this), document.getElementById(\"root\"));","map":{"version":3,"sources":["C:/code3/web/src/index.js"],"names":["React","ReactDOM","App","ApolloClient","InMemoryCache","ApolloProvider","split","HttpLink","WebSocketLink","getMainDefinition","httpLink","uri","wsLink","options","reconnect","splitLink","query","definition","kind","operation","client","link","cache","credentials","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,SAASC,YAAT,EAAuBC,aAAvB,EAAsCC,cAAtC,QAA4D,gBAA5D;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,gBAAhC;AACA,OAAO,aAAP;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,iBAAT,QAAkC,0BAAlC;;AAEA,MAAMC,QAAQ,GAAG,IAAIH,QAAJ,CAAa;AAC1BI,EAAAA,GAAG,EAAE;AADqB,CAAb,CAAjB;AAIA,MAAMC,MAAM,GAAG,IAAIJ,aAAJ,CAAkB;AAC7BG,EAAAA,GAAG,EAAE,mCADwB;AAE7BE,EAAAA,OAAO,EAAE;AACLC,IAAAA,SAAS,EAAE;AADN;AAFoB,CAAlB,CAAf;AAOA,MAAMC,SAAS,GAAGT,KAAK,CACnB,CAAC;AAAEU,EAAAA;AAAF,CAAD,KAAe;AACX,QAAMC,UAAU,GAAGR,iBAAiB,CAACO,KAAD,CAApC;AACA,SACIC,UAAU,CAACC,IAAX,KAAoB,qBAApB,IACAD,UAAU,CAACE,SAAX,KAAyB,cAF7B;AAIH,CAPkB,EAQnBP,MARmB,EASnBF,QATmB,CAAvB;AAYA,MAAMU,MAAM,GAAG,IAAIjB,YAAJ,CAAiB;AAC5B;AACAkB,EAAAA,IAAI,EAAEN,SAFsB;AAG5BO,EAAAA,KAAK,EAAE,IAAIlB,aAAJ,EAHqB;AAI5BmB,EAAAA,WAAW,EAAE;AAJe,CAAjB,CAAf;AAOAtB,QAAQ,CAACuB,MAAT,eACI,QAAC,cAAD;AAAgB,EAAA,MAAM,EAAEJ,MAAxB;AAAA,yBACI,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,QADJ,EAIIK,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJJ","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\nimport { split, HttpLink } from \"@apollo/client\";\nimport \"./index.css\";\nimport { WebSocketLink } from \"@apollo/client/link/ws\";\nimport { getMainDefinition } from \"@apollo/client/utilities\";\n\nconst httpLink = new HttpLink({\n    uri: \"http://localhost:4000/graphql\",\n});\n\nconst wsLink = new WebSocketLink({\n    uri: \"ws://localhost:4000/subscriptions\",\n    options: {\n        reconnect: true,\n    },\n});\n\nconst splitLink = split(\n    ({ query }) => {\n        const definition = getMainDefinition(query);\n        return (\n            definition.kind === \"OperationDefinition\" &&\n            definition.operation === \"subscription\"\n        );\n    },\n    wsLink,\n    httpLink\n);\n\nconst client = new ApolloClient({\n    // uri: \"http://localhost:4000/graphql\",\n    link: splitLink,\n    cache: new InMemoryCache(),\n    credentials: \"include\",\n});\n\nReactDOM.render(\n    <ApolloProvider client={client}>\n        <App />\n    </ApolloProvider>,\n    document.getElementById(\"root\")\n);\n"]},"metadata":{},"sourceType":"module"}