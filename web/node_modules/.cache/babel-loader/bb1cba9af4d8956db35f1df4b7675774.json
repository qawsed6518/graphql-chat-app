{"ast":null,"code":"var _jsxFileName = \"C:\\\\code3\\\\web\\\\src\\\\components\\\\Messages.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport Message from \"./Message\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Messages({\n  channelName\n}) {\n  _s();\n\n  const {\n    subscribeToMore,\n    ...result\n  } = useQuery(MESSAGES, {\n    variables: {\n      channelName\n    }\n  });\n\n  const ms = channelName => subscribeToMore({\n    document: NEW_MESSAGE,\n    variables: {\n      channelName\n    },\n    updateQuery: (prev, {\n      subscriptionData\n    }) => {\n      if (!subscriptionData.data) return prev;\n      const newMs = subscriptionData.data.newMessage;\n      return Object.assign({}, prev, {\n        msg: [newMs, ...prev.messages]\n      });\n    }\n  });\n\n  const MS = result.loading ? /*#__PURE__*/_jsxDEV(Container, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(Container, {\n    children: result.data.messages.map(message => /*#__PURE__*/_jsxDEV(Message, {\n      timestamp: message.date,\n      message: message.text,\n      user: message.user\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n  return MS;\n}\n\n_s(Messages, \"0PSlxKdhZuty3h1dxa7tuP6aVwo=\", false, function () {\n  return [useQuery];\n});\n\n_c = Messages;\nexport default Messages;\nconst NEW_MESSAGE = gql`\n    subscription new_Message($channelName: String!) {\n        newMessage(channelName: $channelName) {\n            user\n            text\n            date\n        }\n    }\n`;\nconst MESSAGES = gql`\n    query Messages($channelName: String!) {\n        messages(channelName: $channelName) {\n            user\n            text\n            date\n        }\n    }\n`;\nconst Container = styled.div`\n    flex: 1;\n    overflow: auto;\n\n    ::-webkit-scrollbar {\n        width: 10px;\n    }\n    ::-webkit-scrollbar-thumb {\n        background-color: #2f3542;\n    }\n    ::-webkit-scrollbar-track {\n        background-color: grey;\n    }\n`;\n_c2 = Container;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Messages\");\n$RefreshReg$(_c2, \"Container\");","map":{"version":3,"sources":["C:/code3/web/src/components/Messages.js"],"names":["React","styled","Message","gql","useQuery","Messages","channelName","subscribeToMore","result","MESSAGES","variables","ms","document","NEW_MESSAGE","updateQuery","prev","subscriptionData","data","newMs","newMessage","Object","assign","msg","messages","MS","loading","map","message","date","text","user","Container","div"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;;;AAEA,SAASC,QAAT,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAAmC;AAAA;;AAC/B,QAAM;AAAEC,IAAAA,eAAF;AAAmB,OAAGC;AAAtB,MAAiCJ,QAAQ,CAACK,QAAD,EAAW;AACtDC,IAAAA,SAAS,EAAE;AAAEJ,MAAAA;AAAF;AAD2C,GAAX,CAA/C;;AAIA,QAAMK,EAAE,GAAIL,WAAD,IACPC,eAAe,CAAC;AACZK,IAAAA,QAAQ,EAAEC,WADE;AAEZH,IAAAA,SAAS,EAAE;AAAEJ,MAAAA;AAAF,KAFC;AAGZQ,IAAAA,WAAW,EAAE,CAACC,IAAD,EAAO;AAAEC,MAAAA;AAAF,KAAP,KAAgC;AACzC,UAAI,CAACA,gBAAgB,CAACC,IAAtB,EAA4B,OAAOF,IAAP;AAC5B,YAAMG,KAAK,GAAGF,gBAAgB,CAACC,IAAjB,CAAsBE,UAApC;AACA,aAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBN,IAAlB,EAAwB;AAC3BO,QAAAA,GAAG,EAAE,CAACJ,KAAD,EAAQ,GAAGH,IAAI,CAACQ,QAAhB;AADsB,OAAxB,CAAP;AAGH;AATW,GAAD,CADnB;;AAaA,QAAMC,EAAE,GAAGhB,MAAM,CAACiB,OAAP,gBACP,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,UADO,gBAGP,QAAC,SAAD;AAAA,cACKjB,MAAM,CAACS,IAAP,CAAYM,QAAZ,CAAqBG,GAArB,CAA0BC,OAAD,iBACtB,QAAC,OAAD;AACI,MAAA,SAAS,EAAEA,OAAO,CAACC,IADvB;AAEI,MAAA,OAAO,EAAED,OAAO,CAACE,IAFrB;AAGI,MAAA,IAAI,EAAEF,OAAO,CAACG;AAHlB;AAAA;AAAA;AAAA;AAAA,YADH;AADL;AAAA;AAAA;AAAA;AAAA,UAHJ;AAcA,SAAON,EAAP;AACH;;GAjCQnB,Q;UACkCD,Q;;;KADlCC,Q;AAkCT,eAAeA,QAAf;AAEA,MAAMQ,WAAW,GAAGV,GAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;AAUA,MAAMM,QAAQ,GAAGN,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;AAUA,MAAM4B,SAAS,GAAG9B,MAAM,CAAC+B,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAbA;MAAMD,S","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Message from \"./Message\";\r\nimport { gql, useQuery } from \"@apollo/client\";\r\n\r\nfunction Messages({ channelName }) {\r\n    const { subscribeToMore, ...result } = useQuery(MESSAGES, {\r\n        variables: { channelName },\r\n    });\r\n\r\n    const ms = (channelName) =>\r\n        subscribeToMore({\r\n            document: NEW_MESSAGE,\r\n            variables: { channelName },\r\n            updateQuery: (prev, { subscriptionData }) => {\r\n                if (!subscriptionData.data) return prev;\r\n                const newMs = subscriptionData.data.newMessage;\r\n                return Object.assign({}, prev, {\r\n                    msg: [newMs, ...prev.messages],\r\n                });\r\n            },\r\n        });\r\n\r\n    const MS = result.loading ? (\r\n        <Container></Container>\r\n    ) : (\r\n        <Container>\r\n            {result.data.messages.map((message) => (\r\n                <Message\r\n                    timestamp={message.date}\r\n                    message={message.text}\r\n                    user={message.user}\r\n                />\r\n            ))}\r\n        </Container>\r\n    );\r\n\r\n    return MS;\r\n}\r\nexport default Messages;\r\n\r\nconst NEW_MESSAGE = gql`\r\n    subscription new_Message($channelName: String!) {\r\n        newMessage(channelName: $channelName) {\r\n            user\r\n            text\r\n            date\r\n        }\r\n    }\r\n`;\r\n\r\nconst MESSAGES = gql`\r\n    query Messages($channelName: String!) {\r\n        messages(channelName: $channelName) {\r\n            user\r\n            text\r\n            date\r\n        }\r\n    }\r\n`;\r\n\r\nconst Container = styled.div`\r\n    flex: 1;\r\n    overflow: auto;\r\n\r\n    ::-webkit-scrollbar {\r\n        width: 10px;\r\n    }\r\n    ::-webkit-scrollbar-thumb {\r\n        background-color: #2f3542;\r\n    }\r\n    ::-webkit-scrollbar-track {\r\n        background-color: grey;\r\n    }\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}