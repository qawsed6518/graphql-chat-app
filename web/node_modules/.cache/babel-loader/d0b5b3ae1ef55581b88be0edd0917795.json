{"ast":null,"code":"var _jsxFileName = \"C:\\\\code3\\\\web\\\\src\\\\routes\\\\Test.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { gql, useMutation } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MUTATION = gql`\n    mutation ($file: Upload!) {\n        createFile(file: $file)\n    }\n`;\n\nfunction Test() {\n  _s();\n\n  const [mutate] = useMutation(MUTATION);\n\n  function onChange({\n    target: {\n      validity,\n      files: [file]\n    }\n  }) {\n    if (validity.valid) mutate({\n      variables: {\n        file\n      }\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    type: \"file\",\n    required: true,\n    onChange: onChange\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 12\n  }, this);\n}\n\n_s(Test, \"grlonYozFypkfP0s7vTF79Oo2Ls=\", false, function () {\n  return [useMutation];\n});\n\n_c = Test;\nexport default Test;\n\nvar _c;\n\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"sources":["C:/code3/web/src/routes/Test.js"],"names":["React","gql","useMutation","MUTATION","Test","mutate","onChange","target","validity","files","file","valid","variables"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,WAAd,QAAiC,gBAAjC;;AAEA,MAAMC,QAAQ,GAAGF,GAAI;AACrB;AACA;AACA;AACA,CAJA;;AAMA,SAASG,IAAT,GAAgB;AAAA;;AACZ,QAAM,CAACC,MAAD,IAAWH,WAAW,CAACC,QAAD,CAA5B;;AAEA,WAASG,QAAT,CAAkB;AACdC,IAAAA,MAAM,EAAE;AACJC,MAAAA,QADI;AAEJC,MAAAA,KAAK,EAAE,CAACC,IAAD;AAFH;AADM,GAAlB,EAKG;AACC,QAAIF,QAAQ,CAACG,KAAb,EAAoBN,MAAM,CAAC;AAAEO,MAAAA,SAAS,EAAE;AAAEF,QAAAA;AAAF;AAAb,KAAD,CAAN;AACvB;;AAED,sBAAO;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,QAAQ,MAA3B;AAA4B,IAAA,QAAQ,EAAEJ;AAAtC;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;;GAbQF,I;UACYF,W;;;KADZE,I;AAeT,eAAeA,IAAf","sourcesContent":["import React from \"react\";\r\nimport { gql, useMutation } from \"@apollo/client\";\r\n\r\nconst MUTATION = gql`\r\n    mutation ($file: Upload!) {\r\n        createFile(file: $file)\r\n    }\r\n`;\r\n\r\nfunction Test() {\r\n    const [mutate] = useMutation(MUTATION);\r\n\r\n    function onChange({\r\n        target: {\r\n            validity,\r\n            files: [file],\r\n        },\r\n    }) {\r\n        if (validity.valid) mutate({ variables: { file } });\r\n    }\r\n\r\n    return <input type=\"file\" required onChange={onChange} />;\r\n}\r\n\r\nexport default Test;\r\n"]},"metadata":{},"sourceType":"module"}