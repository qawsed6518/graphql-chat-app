{"ast":null,"code":"var _jsxFileName = \"C:\\\\code3\\\\web\\\\src\\\\components\\\\Messages.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport styled from \"styled-components\";\nimport Message from \"./Message\";\nimport { gql, useQuery } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Messages({\n  channelName\n}) {\n  _s();\n\n  const {\n    subscribeToMore,\n    loading,\n    data\n  } = useQuery(MESSAGES, {\n    variables: {\n      channelName\n    }\n  });\n  subscribeToMore({\n    document: NEW_MESSAGE,\n    variables: {\n      channelName\n    },\n    updateQuery: (prev, {\n      subscriptionData\n    }) => {\n      if (!subscriptionData.data) console.log(prev);\n      const newMs = subscriptionData.data.newMessage;\n      console.log(Object.assign({}, prev, {\n        messages: [newMs, ...prev.messages]\n      }));\n      return /*#__PURE__*/_jsxDEV(Container, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 20\n      }, this);\n    }\n  }); // const MS = loading ? (\n  //     <Container></Container>\n  // ) : (\n  //     <Container>\n  //         {/* {data.messages.map((message) => (\n  //             <Message\n  //                 timestamp={message.date}\n  //                 message={message.text}\n  //                 user={message.user}\n  //             />\n  //         ))} */}\n  //     </Container>\n  // );\n  // return MS;\n}\n\n_s(Messages, \"RxTfskBR6P93NGbJQu+SwDhCLKc=\", false, function () {\n  return [useQuery];\n});\n\n_c = Messages;\nexport default Messages;\nconst NEW_MESSAGE = gql`\n    subscription new_Message($channelName: String!) {\n        newMessage(channelName: $channelName) {\n            user\n            text\n            date\n        }\n    }\n`;\nconst MESSAGES = gql`\n    query Messages($channelName: String!) {\n        messages(channelName: $channelName) {\n            user\n            text\n            date\n        }\n    }\n`;\nconst Container = styled.div`\n    flex: 1;\n    overflow: auto;\n\n    ::-webkit-scrollbar {\n        width: 10px;\n    }\n    ::-webkit-scrollbar-thumb {\n        background-color: #2f3542;\n    }\n    ::-webkit-scrollbar-track {\n        background-color: grey;\n    }\n`;\n_c2 = Container;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Messages\");\n$RefreshReg$(_c2, \"Container\");","map":{"version":3,"sources":["C:/code3/web/src/components/Messages.js"],"names":["React","styled","Message","gql","useQuery","Messages","channelName","subscribeToMore","loading","data","MESSAGES","variables","document","NEW_MESSAGE","updateQuery","prev","subscriptionData","console","log","newMs","newMessage","Object","assign","messages","Container","div"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;;;AAEA,SAASC,QAAT,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAAmC;AAAA;;AAC/B,QAAM;AAAEC,IAAAA,eAAF;AAAmBC,IAAAA,OAAnB;AAA4BC,IAAAA;AAA5B,MAAqCL,QAAQ,CAACM,QAAD,EAAW;AAC1DC,IAAAA,SAAS,EAAE;AAAEL,MAAAA;AAAF;AAD+C,GAAX,CAAnD;AAIAC,EAAAA,eAAe,CAAC;AACZK,IAAAA,QAAQ,EAAEC,WADE;AAEZF,IAAAA,SAAS,EAAE;AAAEL,MAAAA;AAAF,KAFC;AAGZQ,IAAAA,WAAW,EAAE,CAACC,IAAD,EAAO;AAAEC,MAAAA;AAAF,KAAP,KAAgC;AACzC,UAAI,CAACA,gBAAgB,CAACP,IAAtB,EAA4BQ,OAAO,CAACC,GAAR,CAAYH,IAAZ;AAC5B,YAAMI,KAAK,GAAGH,gBAAgB,CAACP,IAAjB,CAAsBW,UAApC;AACAH,MAAAA,OAAO,CAACC,GAAR,CACIG,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,IAAlB,EAAwB;AACpBQ,QAAAA,QAAQ,EAAE,CAACJ,KAAD,EAAQ,GAAGJ,IAAI,CAACQ,QAAhB;AADU,OAAxB,CADJ;AAMA,0BAAO,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,cAAP;AACH;AAbW,GAAD,CAAf,CAL+B,CAqB/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACH;;GApCQlB,Q;UACsCD,Q;;;KADtCC,Q;AAqCT,eAAeA,QAAf;AAEA,MAAMQ,WAAW,GAAGV,GAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;AAUA,MAAMO,QAAQ,GAAGP,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;AAUA,MAAMqB,SAAS,GAAGvB,MAAM,CAACwB,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAbA;MAAMD,S","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Message from \"./Message\";\r\nimport { gql, useQuery } from \"@apollo/client\";\r\n\r\nfunction Messages({ channelName }) {\r\n    const { subscribeToMore, loading, data } = useQuery(MESSAGES, {\r\n        variables: { channelName },\r\n    });\r\n\r\n    subscribeToMore({\r\n        document: NEW_MESSAGE,\r\n        variables: { channelName },\r\n        updateQuery: (prev, { subscriptionData }) => {\r\n            if (!subscriptionData.data) console.log(prev);\r\n            const newMs = subscriptionData.data.newMessage;\r\n            console.log(\r\n                Object.assign({}, prev, {\r\n                    messages: [newMs, ...prev.messages],\r\n                })\r\n            );\r\n\r\n            return <Container />;\r\n        },\r\n    });\r\n\r\n    // const MS = loading ? (\r\n    //     <Container></Container>\r\n    // ) : (\r\n    //     <Container>\r\n    //         {/* {data.messages.map((message) => (\r\n    //             <Message\r\n    //                 timestamp={message.date}\r\n    //                 message={message.text}\r\n    //                 user={message.user}\r\n    //             />\r\n    //         ))} */}\r\n    //     </Container>\r\n    // );\r\n\r\n    // return MS;\r\n}\r\nexport default Messages;\r\n\r\nconst NEW_MESSAGE = gql`\r\n    subscription new_Message($channelName: String!) {\r\n        newMessage(channelName: $channelName) {\r\n            user\r\n            text\r\n            date\r\n        }\r\n    }\r\n`;\r\n\r\nconst MESSAGES = gql`\r\n    query Messages($channelName: String!) {\r\n        messages(channelName: $channelName) {\r\n            user\r\n            text\r\n            date\r\n        }\r\n    }\r\n`;\r\n\r\nconst Container = styled.div`\r\n    flex: 1;\r\n    overflow: auto;\r\n\r\n    ::-webkit-scrollbar {\r\n        width: 10px;\r\n    }\r\n    ::-webkit-scrollbar-thumb {\r\n        background-color: #2f3542;\r\n    }\r\n    ::-webkit-scrollbar-track {\r\n        background-color: grey;\r\n    }\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}