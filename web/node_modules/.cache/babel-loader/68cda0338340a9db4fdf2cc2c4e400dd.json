{"ast":null,"code":"var _jsxFileName = \"C:\\\\code3\\\\web\\\\src\\\\components\\\\Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { gql, useMutation } from \"@apollo/client\";\nimport styled from \"styled-components\";\nimport { Message } from \"semantic-ui-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LOGIN = gql`\n    mutation LOGIN($username: String!, $password: String!) {\n        login(options: { username: $username, password: $password }) {\n            user {\n                username\n                password\n                createdAt\n            }\n            errors {\n                field\n                message\n            }\n        }\n    }\n`;\n\nfunction Login() {\n  _s();\n\n  const [err, setErr] = useState(\"\");\n  const {\n    register,\n    handleSubmit\n  } = useForm();\n  const [loginMutation] = useMutation(LOGIN, {\n    onCompleted({\n      login: {\n        user,\n        errors\n      }\n    }) {\n      user ? window.location.reload() : setErr(errors[0].field);\n    }\n\n  });\n\n  const onSubmit = async data => await loginMutation({\n    variables: data\n  });\n\n  return /*#__PURE__*/_jsxDEV(Bd, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Log, {\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"register-form\",\n          onSubmit: handleSubmit(onSubmit),\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            name: \"username\",\n            type: \"username\",\n            placeholder: \"Username\",\n            ...register(\"username\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            name: \"password\",\n            type: \"password\",\n            placeholder: \"Password\",\n            ...register(\"password\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Sign In\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 25\n          }, this), err ? /*#__PURE__*/_jsxDEV(Message, {\n            error: true,\n            header: \"LOGIN Error\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 29\n          }, this) : null, /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"message\",\n            children: [\"Not registered?\", \" \", /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"http://localhost:3000/register\",\n              children: \"Create an account\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Login, \"EaX5lWTpsIHSbJe4GYiTkgEg4Qg=\", false, function () {\n  return [useForm, useMutation];\n});\n\n_c = Login;\nexport default Login;\nconst Bd = styled.div`\n    background: #2f3135;\n    display: flex;\n    flex: 1;\n    flex-direction: column;\n    height: 100vh;\n`;\n_c2 = Bd;\nconst Container = styled.div`\n    width: 360px;\n    padding: 1% 0 0;\n    margin: auto;\n`;\n_c3 = Container;\nconst Log = styled.div`\n    form {\n        position: relative;\n        z-index: 1;\n        background: #ffffff;\n        max-width: 360px;\n        margin: 0 auto 100px;\n        padding: 45px;\n        text-align: center;\n        box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.2),\n            0 5px 5px 0 rgba(0, 0, 0, 0.24);\n    }\n\n    input {\n        font-family: \"Roboto\", sans-serif;\n        outline: 0;\n        background: #f2f2f2;\n        width: 100%;\n        border: 0;\n        margin: 0 0 15px;\n        padding: 15px;\n        box-sizing: border-box;\n        font-size: 14px;\n    }\n\n    button {\n        font-family: \"Roboto\", sans-serif;\n        text-transform: uppercase;\n        outline: 0;\n        background: #2f3135;\n        width: 100%;\n        border: 0;\n        padding: 15px;\n        color: #ffffff;\n        font-size: 14px;\n        -webkit-transition: all 0.3 ease;\n        transition: all 0.3 ease;\n        cursor: pointer;\n    }\n\n    button:hover,\n    button:active,\n    button:focus {\n        background: #43a047;\n    }\n\n    .message {\n        margin: 15px 0 0;\n        color: #b3b3b3;\n        font-size: 12px;\n    }\n\n    .message a {\n        color: #4caf50;\n        text-decoration: none;\n    }\n`; // import React, { useState } from \"react\";\n// import { useForm } from \"react-hook-form\";\n// import {\n//     Form,\n//     Button,\n//     Input,\n//     Container,\n//     Header,\n//     Message,\n// } from \"semantic-ui-react\";\n// import { gql, useMutation } from \"@apollo/client\";\n// const LOGIN = gql`\n//     mutation LOGIN($username: String!, $password: String!) {\n//         login(options: { username: $username, password: $password }) {\n//             user {\n//                 username\n//                 password\n//                 createdAt\n//             }\n//             errors {\n//                 field\n//                 message\n//             }\n//         }\n//     }\n// `;\n// function Login() {\n//     const [err, setErr] = useState(\"\");\n//     const { register, handleSubmit } = useForm();\n//     const [loginMutation] = useMutation(LOGIN, {\n//         onCompleted({ login: { user, errors } }) {\n//             user ? window.location.reload() : setErr(errors[0].field);\n//         },\n//     });\n//     const onSubmit = async (data) => await loginMutation({ variables: data });\n//     return (\n//         <Container text>\n//             <Header as=\"h2\">Login</Header>\n//             <Form onSubmit={handleSubmit(onSubmit)}>\n//                 <Form.Field error={!!err}>\n//                     <Input\n//                         name=\"username\"\n//                         type=\"username\"\n//                         placeholder=\"Username\"\n//                         fluid\n//                         {...register(\"username\")}\n//                     />\n//                 </Form.Field>\n//                 <Form.Field>\n//                     <Input\n//                         name=\"password\"\n//                         type=\"password\"\n//                         placeholder=\"Password\"\n//                         {...register(\"password\")}\n//                         fluid\n//                     />\n//                 </Form.Field>\n//                 {err ? <Message error header=\"LOGIN Error\"></Message> : null}\n//                 <Button type=\"submit\">Submit</Button>\n//             </Form>\n//         </Container>\n//     );\n// }\n// export default Login;\n\n_c4 = Log;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"Login\");\n$RefreshReg$(_c2, \"Bd\");\n$RefreshReg$(_c3, \"Container\");\n$RefreshReg$(_c4, \"Log\");","map":{"version":3,"sources":["C:/code3/web/src/components/Login.js"],"names":["React","useState","useForm","gql","useMutation","styled","Message","LOGIN","Login","err","setErr","register","handleSubmit","loginMutation","onCompleted","login","user","errors","window","location","reload","field","onSubmit","data","variables","Bd","div","Container","Log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,GAAT,EAAcC,WAAd,QAAiC,gBAAjC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,OAAT,QAAwB,mBAAxB;;AAEA,MAAMC,KAAK,GAAGJ,GAAI;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAdA;;AAgBA,SAASK,KAAT,GAAiB;AAAA;;AACb,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBT,QAAQ,CAAC,EAAD,CAA9B;AACA,QAAM;AAAEU,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAA6BV,OAAO,EAA1C;AACA,QAAM,CAACW,aAAD,IAAkBT,WAAW,CAACG,KAAD,EAAQ;AACvCO,IAAAA,WAAW,CAAC;AAAEC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,IAAF;AAAQC,QAAAA;AAAR;AAAT,KAAD,EAA8B;AACrCD,MAAAA,IAAI,GAAGE,MAAM,CAACC,QAAP,CAAgBC,MAAhB,EAAH,GAA8BV,MAAM,CAACO,MAAM,CAAC,CAAD,CAAN,CAAUI,KAAX,CAAxC;AACH;;AAHsC,GAAR,CAAnC;;AAMA,QAAMC,QAAQ,GAAG,MAAOC,IAAP,IAAgB,MAAMV,aAAa,CAAC;AAAEW,IAAAA,SAAS,EAAED;AAAb,GAAD,CAApD;;AAEA,sBACI,QAAC,EAAD;AAAA,2BACI,QAAC,SAAD;AAAA,6BACI,QAAC,GAAD;AAAA,+BACI;AACI,UAAA,SAAS,EAAC,eADd;AAEI,UAAA,QAAQ,EAAEX,YAAY,CAACU,QAAD,CAF1B;AAAA,kCAII;AACI,YAAA,IAAI,EAAC,UADT;AAEI,YAAA,IAAI,EAAC,UAFT;AAGI,YAAA,WAAW,EAAC,UAHhB;AAAA,eAIQX,QAAQ,CAAC,UAAD;AAJhB;AAAA;AAAA;AAAA;AAAA,kBAJJ,eAUI;AACI,YAAA,IAAI,EAAC,UADT;AAEI,YAAA,IAAI,EAAC,UAFT;AAGI,YAAA,WAAW,EAAC,UAHhB;AAAA,eAIQA,QAAQ,CAAC,UAAD;AAJhB;AAAA;AAAA;AAAA;AAAA,kBAVJ,eAgBI;AAAQ,YAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAhBJ,EAiBKF,GAAG,gBACA,QAAC,OAAD;AAAS,YAAA,KAAK,MAAd;AAAe,YAAA,MAAM,EAAC;AAAtB;AAAA;AAAA;AAAA;AAAA,kBADA,GAEA,IAnBR,eAoBI;AAAG,YAAA,SAAS,EAAC,SAAb;AAAA,0CACoB,GADpB,eAEI;AAAG,cAAA,IAAI,EAAC,gCAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBApBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAmCH;;GA9CQD,K;UAE8BN,O,EACXE,W;;;KAHnBI,K;AAgDT,eAAeA,KAAf;AAEA,MAAMiB,EAAE,GAAGpB,MAAM,CAACqB,GAAI;AACtB;AACA;AACA;AACA;AACA;AACA,CANA;MAAMD,E;AAQN,MAAME,SAAS,GAAGtB,MAAM,CAACqB,GAAI;AAC7B;AACA;AACA;AACA,CAJA;MAAMC,S;AAMN,MAAMC,GAAG,GAAGvB,MAAM,CAACqB,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAxDA,C,CA0DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;MA/HME,G","sourcesContent":["import React, { useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { gql, useMutation } from \"@apollo/client\";\r\nimport styled from \"styled-components\";\r\nimport { Message } from \"semantic-ui-react\";\r\n\r\nconst LOGIN = gql`\r\n    mutation LOGIN($username: String!, $password: String!) {\r\n        login(options: { username: $username, password: $password }) {\r\n            user {\r\n                username\r\n                password\r\n                createdAt\r\n            }\r\n            errors {\r\n                field\r\n                message\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nfunction Login() {\r\n    const [err, setErr] = useState(\"\");\r\n    const { register, handleSubmit } = useForm();\r\n    const [loginMutation] = useMutation(LOGIN, {\r\n        onCompleted({ login: { user, errors } }) {\r\n            user ? window.location.reload() : setErr(errors[0].field);\r\n        },\r\n    });\r\n\r\n    const onSubmit = async (data) => await loginMutation({ variables: data });\r\n\r\n    return (\r\n        <Bd>\r\n            <Container>\r\n                <Log>\r\n                    <form\r\n                        className=\"register-form\"\r\n                        onSubmit={handleSubmit(onSubmit)}\r\n                    >\r\n                        <input\r\n                            name=\"username\"\r\n                            type=\"username\"\r\n                            placeholder=\"Username\"\r\n                            {...register(\"username\")}\r\n                        />\r\n                        <input\r\n                            name=\"password\"\r\n                            type=\"password\"\r\n                            placeholder=\"Password\"\r\n                            {...register(\"password\")}\r\n                        />\r\n                        <button type=\"submit\">Sign In</button>\r\n                        {err ? (\r\n                            <Message error header=\"LOGIN Error\"></Message>\r\n                        ) : null}\r\n                        <p className=\"message\">\r\n                            Not registered?{\" \"}\r\n                            <a href=\"http://localhost:3000/register\">\r\n                                Create an account\r\n                            </a>\r\n                        </p>\r\n                    </form>\r\n                </Log>\r\n            </Container>\r\n        </Bd>\r\n    );\r\n}\r\n\r\nexport default Login;\r\n\r\nconst Bd = styled.div`\r\n    background: #2f3135;\r\n    display: flex;\r\n    flex: 1;\r\n    flex-direction: column;\r\n    height: 100vh;\r\n`;\r\n\r\nconst Container = styled.div`\r\n    width: 360px;\r\n    padding: 1% 0 0;\r\n    margin: auto;\r\n`;\r\n\r\nconst Log = styled.div`\r\n    form {\r\n        position: relative;\r\n        z-index: 1;\r\n        background: #ffffff;\r\n        max-width: 360px;\r\n        margin: 0 auto 100px;\r\n        padding: 45px;\r\n        text-align: center;\r\n        box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.2),\r\n            0 5px 5px 0 rgba(0, 0, 0, 0.24);\r\n    }\r\n\r\n    input {\r\n        font-family: \"Roboto\", sans-serif;\r\n        outline: 0;\r\n        background: #f2f2f2;\r\n        width: 100%;\r\n        border: 0;\r\n        margin: 0 0 15px;\r\n        padding: 15px;\r\n        box-sizing: border-box;\r\n        font-size: 14px;\r\n    }\r\n\r\n    button {\r\n        font-family: \"Roboto\", sans-serif;\r\n        text-transform: uppercase;\r\n        outline: 0;\r\n        background: #2f3135;\r\n        width: 100%;\r\n        border: 0;\r\n        padding: 15px;\r\n        color: #ffffff;\r\n        font-size: 14px;\r\n        -webkit-transition: all 0.3 ease;\r\n        transition: all 0.3 ease;\r\n        cursor: pointer;\r\n    }\r\n\r\n    button:hover,\r\n    button:active,\r\n    button:focus {\r\n        background: #43a047;\r\n    }\r\n\r\n    .message {\r\n        margin: 15px 0 0;\r\n        color: #b3b3b3;\r\n        font-size: 12px;\r\n    }\r\n\r\n    .message a {\r\n        color: #4caf50;\r\n        text-decoration: none;\r\n    }\r\n`;\r\n\r\n// import React, { useState } from \"react\";\r\n// import { useForm } from \"react-hook-form\";\r\n// import {\r\n//     Form,\r\n//     Button,\r\n//     Input,\r\n//     Container,\r\n//     Header,\r\n//     Message,\r\n// } from \"semantic-ui-react\";\r\n// import { gql, useMutation } from \"@apollo/client\";\r\n\r\n// const LOGIN = gql`\r\n//     mutation LOGIN($username: String!, $password: String!) {\r\n//         login(options: { username: $username, password: $password }) {\r\n//             user {\r\n//                 username\r\n//                 password\r\n//                 createdAt\r\n//             }\r\n//             errors {\r\n//                 field\r\n//                 message\r\n//             }\r\n//         }\r\n//     }\r\n// `;\r\n\r\n// function Login() {\r\n//     const [err, setErr] = useState(\"\");\r\n//     const { register, handleSubmit } = useForm();\r\n//     const [loginMutation] = useMutation(LOGIN, {\r\n//         onCompleted({ login: { user, errors } }) {\r\n//             user ? window.location.reload() : setErr(errors[0].field);\r\n//         },\r\n//     });\r\n\r\n//     const onSubmit = async (data) => await loginMutation({ variables: data });\r\n\r\n//     return (\r\n//         <Container text>\r\n//             <Header as=\"h2\">Login</Header>\r\n//             <Form onSubmit={handleSubmit(onSubmit)}>\r\n//                 <Form.Field error={!!err}>\r\n//                     <Input\r\n//                         name=\"username\"\r\n//                         type=\"username\"\r\n//                         placeholder=\"Username\"\r\n//                         fluid\r\n//                         {...register(\"username\")}\r\n//                     />\r\n//                 </Form.Field>\r\n\r\n//                 <Form.Field>\r\n//                     <Input\r\n//                         name=\"password\"\r\n//                         type=\"password\"\r\n//                         placeholder=\"Password\"\r\n//                         {...register(\"password\")}\r\n//                         fluid\r\n//                     />\r\n//                 </Form.Field>\r\n//                 {err ? <Message error header=\"LOGIN Error\"></Message> : null}\r\n//                 <Button type=\"submit\">Submit</Button>\r\n//             </Form>\r\n//         </Container>\r\n//     );\r\n// }\r\n\r\n// export default Login;\r\n"]},"metadata":{},"sourceType":"module"}