{"ast":null,"code":"var _jsxFileName = \"C:\\\\code3\\\\web\\\\src\\\\index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport { ApolloClient, InMemoryCache, ApolloProvider, split // HttpLink,\n} from \"@apollo/client\";\nimport { getMainDefinition } from \"@apollo/client/utilities\";\nimport { WebSocketLink } from \"@apollo/client/link/ws\";\nimport { createUploadLink } from \"apollo-upload-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst httpLink = new createUploadLink({\n  uri: `http://localhost:4000/graphql`,\n  credentials: \"include\",\n  fetch,\n  fetchOptions: {\n    credentials: \"include\"\n  }\n});\nconst wsLink = new WebSocketLink({\n  uri: `ws://localhost:4000/subscriptions`,\n  options: {\n    reconnect: true\n  }\n});\nconst splitLink = split(({\n  query\n}) => {\n  const definition = getMainDefinition(query);\n  return definition.kind === \"OperationDefinition\" && definition.operation === \"subscription\";\n}, wsLink, httpLink);\nconst client = new ApolloClient({\n  // uri: `http://localhost:4000/graphql`,\n  link: splitLink,\n  cache: new InMemoryCache() // {\n  //     typePolicies: {\n  //         Query: {\n  //             fields: {\n  //                 messages: {\n  //                     merge(existing, incoming) {\n  //                         return { ...existing, ...incoming };\n  //                     },\n  //                 },\n  //             },\n  //         },\n  //     },\n  // }\n\n});\nReactDOM.render( /*#__PURE__*/_jsxDEV(ApolloProvider, {\n  client: client,\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 62,\n  columnNumber: 5\n}, this), document.getElementById(\"root\"));","map":{"version":3,"sources":["C:/code3/web/src/index.js"],"names":["React","ReactDOM","App","ApolloClient","InMemoryCache","ApolloProvider","split","getMainDefinition","WebSocketLink","createUploadLink","httpLink","uri","credentials","fetch","fetchOptions","wsLink","options","reconnect","splitLink","query","definition","kind","operation","client","link","cache","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAO,aAAP;AACA,SACIC,YADJ,EAEIC,aAFJ,EAGIC,cAHJ,EAIIC,KAJJ,CAKI;AALJ,OAMO,gBANP;AAOA,SAASC,iBAAT,QAAkC,0BAAlC;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SAASC,gBAAT,QAAiC,sBAAjC;;AAEA,MAAMC,QAAQ,GAAG,IAAID,gBAAJ,CAAqB;AAClCE,EAAAA,GAAG,EAAG,+BAD4B;AAElCC,EAAAA,WAAW,EAAE,SAFqB;AAGlCC,EAAAA,KAHkC;AAIlCC,EAAAA,YAAY,EAAE;AAAEF,IAAAA,WAAW,EAAE;AAAf;AAJoB,CAArB,CAAjB;AAOA,MAAMG,MAAM,GAAG,IAAIP,aAAJ,CAAkB;AAC7BG,EAAAA,GAAG,EAAG,mCADuB;AAE7BK,EAAAA,OAAO,EAAE;AACLC,IAAAA,SAAS,EAAE;AADN;AAFoB,CAAlB,CAAf;AAOA,MAAMC,SAAS,GAAGZ,KAAK,CACnB,CAAC;AAAEa,EAAAA;AAAF,CAAD,KAAe;AACX,QAAMC,UAAU,GAAGb,iBAAiB,CAACY,KAAD,CAApC;AACA,SACIC,UAAU,CAACC,IAAX,KAAoB,qBAApB,IACAD,UAAU,CAACE,SAAX,KAAyB,cAF7B;AAIH,CAPkB,EAQnBP,MARmB,EASnBL,QATmB,CAAvB;AAYA,MAAMa,MAAM,GAAG,IAAIpB,YAAJ,CAAiB;AAC5B;AACAqB,EAAAA,IAAI,EAAEN,SAFsB;AAG5BO,EAAAA,KAAK,EAAE,IAAIrB,aAAJ,EAHqB,CAI5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAhB4B,CAAjB,CAAf;AAmBAH,QAAQ,CAACyB,MAAT,eACI,QAAC,cAAD;AAAgB,EAAA,MAAM,EAAEH,MAAxB;AAAA,yBACI,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,QADJ,EAIII,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJJ","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport {\n    ApolloClient,\n    InMemoryCache,\n    ApolloProvider,\n    split,\n    // HttpLink,\n} from \"@apollo/client\";\nimport { getMainDefinition } from \"@apollo/client/utilities\";\nimport { WebSocketLink } from \"@apollo/client/link/ws\";\nimport { createUploadLink } from \"apollo-upload-client\";\n\nconst httpLink = new createUploadLink({\n    uri: `http://localhost:4000/graphql`,\n    credentials: \"include\",\n    fetch,\n    fetchOptions: { credentials: \"include\" },\n});\n\nconst wsLink = new WebSocketLink({\n    uri: `ws://localhost:4000/subscriptions`,\n    options: {\n        reconnect: true,\n    },\n});\n\nconst splitLink = split(\n    ({ query }) => {\n        const definition = getMainDefinition(query);\n        return (\n            definition.kind === \"OperationDefinition\" &&\n            definition.operation === \"subscription\"\n        );\n    },\n    wsLink,\n    httpLink\n);\n\nconst client = new ApolloClient({\n    // uri: `http://localhost:4000/graphql`,\n    link: splitLink,\n    cache: new InMemoryCache(),\n    // {\n    //     typePolicies: {\n    //         Query: {\n    //             fields: {\n    //                 messages: {\n    //                     merge(existing, incoming) {\n    //                         return { ...existing, ...incoming };\n    //                     },\n    //                 },\n    //             },\n    //         },\n    //     },\n    // }\n});\n\nReactDOM.render(\n    <ApolloProvider client={client}>\n        <App />\n    </ApolloProvider>,\n    document.getElementById(\"root\")\n);\n"]},"metadata":{},"sourceType":"module"}